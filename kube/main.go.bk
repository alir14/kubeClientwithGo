// package main

// import (
// 	"flag"
// 	"fmt"

// 	//adapter "kube/microbusiness/lib"
// 	"log"
// 	"os"
// 	"os/exec"
// 	"path/filepath"

// 	appsv1 "k8s.io/api/apps/v1"
// 	apiv1 "k8s.io/api/core/v1"
// 	"k8s.io/apimachinery/pkg/api/errors"
// 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
// 	"k8s.io/client-go/kubernetes"
// 	_ "k8s.io/client-go/plugin/pkg/client/auth/oidc"
// 	"k8s.io/client-go/rest"
// 	"k8s.io/client-go/tools/clientcmd"
// )

// func main() {
// 	var isUsingKind bool = true
// 	var kubeConfig string

// 	//get kubeconfig
// 	kubeConfig = getKubeConfig(isUsingKind)

// 	//use the current context in kubeconfig
// 	configContext, err := clientcmd.BuildConfigFromFlags("", kubeConfig)

// 	handleError(err)

// 	// create the clientset
// 	clientSet := getClientSetInstance(configContext)

// 	showMethePods(&clientSet)

// 	createDeployment(&clientSet)

// 	showMethePods(&clientSet)

// 	//adapter.TestPackage("hey")
// }

// func createService(clientSet *kubernetes.Clientset) {
// 	serviceDeployment := clientSet.CoreV1().Services(apiv1.NamespaceDefault)

// 	service := &apiv1.Service{
// 		ObjectMeta: metav1.ObjectMeta{
// 			Name:      "demo-deploymentservice",
// 			Namespace: apiv1.NamespaceDefault,
// 			Labels: map[string]string{
// 				"k8s-app": "kube-controller-manager",
// 			},
// 		},
// 		Spec: apiv1.ServiceSpec{
// 			Ports:     nil,
// 			Selector:  nil,
// 			ClusterIP: "",
// 		},
// 	}

// 	fmt.Println("creating ....")

// 	result, err := serviceDeployment.Create(service)

// 	handleError(err)

// 	log.Printf("created service %q /n", result.GetObjectMeta().GetName())
// }

// func createDeployment(clientSet *kubernetes.Clientset) {
// 	deploymentClient := clientSet.AppsV1().Deployments(apiv1.NamespaceDefault)

// 	deployment := &appsv1.Deployment{
// 		ObjectMeta: metav1.ObjectMeta{
// 			Name: "demo-deployment",
// 		},
// 		Spec: appsv1.DeploymentSpec{
// 			Replicas: int32Ptr(2),
// 			Selector: &metav1.LabelSelector{
// 				MatchLabels: map[string]string{
// 					"app": "demo",
// 				},
// 			},
// 			Template: apiv1.PodTemplateSpec{
// 				ObjectMeta: metav1.ObjectMeta{
// 					Labels: map[string]string{
// 						"app": "demo",
// 					},
// 				},
// 				Spec: apiv1.PodSpec{
// 					Containers: []apiv1.Container{
// 						{
// 							Name:  "web",
// 							Image: "nginx:1.12",
// 							Ports: []apiv1.ContainerPort{
// 								{
// 									Name:          "http",
// 									Protocol:      apiv1.ProtocolTCP,
// 									ContainerPort: 80,
// 								},
// 							},
// 						},
// 					},
// 				},
// 			},
// 		},
// 	}

// 	fmt.Println("creating ....")

// 	result, err := deploymentClient.Create(deployment)

// 	handleError(err)

// 	log.Printf("created deployment %q /n", result.GetObjectMeta().GetName())
// }

// func getKubeConfig(usingKind bool) string {
// 	var kubeconfig string

// 	//get hoem directory path
// 	homeDir := getHomeDirectoryPath()
// 	log.Print(homeDir)

// 	var configName string
// 	if usingKind {
// 		configName = "kind-config-devEnv"
// 	} else {
// 		configName = "config"
// 	}

// 	if homeDir != "" {
// 		flag.StringVar(&kubeconfig, "kubeconfig", filepath.Join(homeDir, ".kube", configName), "(optional) path to config file")
// 	} else {
// 		flag.StringVar(&kubeconfig, "kubeconfig", "", "path to kube config file")
// 	}
// 	return kubeconfig
// }

// func getHomeDirectoryPath() string {
// 	homePath, err := os.UserHomeDir()
// 	handleError(err)
// 	log.Print(homePath)
// 	if homePath != "" {
// 		log.Print("linux mode")
// 		return homePath
// 	}
// 	log.Print("windows mode")
// 	return os.Getenv("USERPROFILE")
// }

// func getClientSetInstance(configContext *rest.Config) kubernetes.Clientset {
// 	log.Print("get Client")

// 	client, err := kubernetes.NewForConfig(configContext)

// 	handleError(err)

// 	return *client
// }

// func showMethePods(clientSet *kubernetes.Clientset) {
// 	log.Print("get All Pods")
// 	pods, err := clientSet.CoreV1().Pods("").List(metav1.ListOptions{})

// 	handleError(err)

// 	fmt.Printf("There are %d pods in the cluster\n", len(pods.Items))

// 	log.Print(pods.Items[1].Spec.DNSConfig)
// }

// func getSpecificPod(clientSet *kubernetes.Clientset, namespace string, podName string) {
// 	log.Printf("get Pod %s \n", podName)
// 	_, err := clientSet.CoreV1().Pods(namespace).Get(podName, metav1.GetOptions{})

// 	if errors.IsNotFound(err) {
// 		fmt.Printf("Pod %s in namespace %s not found\n", podName, namespace)
// 	} else if statusError, isStatus := err.(*errors.StatusError); isStatus {
// 		fmt.Printf("Error getting pod %s in namespace %s: %v\n",
// 			podName, namespace, statusError.ErrStatus.Message)
// 	} else if err != nil {
// 		panic(err.Error())
// 	} else {
// 		fmt.Printf("Found pod %s in namespace %s\n", podName, namespace)
// 		handleError(err)
// 	}
// }

// func handleError(err error) {
// 	if err != nil {
// 		log.Print(err)
// 		panic(err.Error())
// 	}
// }

// func getKindConfigByCommand() string {

// 	cmd := exec.Command("kind", "get", "kubeconfig-path", "--name=devEnv ")
// 	output, err := cmd.CombinedOutput()
// 	handleError(err)
// 	result := string(output)
// 	return result
// }

// func int32Ptr(i int32) *int32 {
// 	return &i
// }

https://github.com/kubernetes/client-go/blob/1a481fb1e32d196227ca218b3867a271192f9280/rest/client_test.go#L331
func restClient(testServer *httptest.Server) (*RESTClient, error) {
	c, err := RESTClientFor(&Config{
		Host: testServer.URL,
		ContentConfig: ContentConfig{
			GroupVersion:         &v1.SchemeGroupVersion,
			NegotiatedSerializer: scheme.Codecs.WithoutConversion(),
		},
		Username: "user",
		Password: "pass",
	})
	return c, err
}